---

- name: set facts to configure redis_master
  run_once: true
  set_fact:
    # yamllint disable-line rule:line-length
    master_ip: "{{ hostvars[groups.redis_master[0]].ansible_default_ipv4.address }}"
    master_hostname: "{{ hostvars[groups.redis_master[0]].inventory_hostname }}"
    redis_state: "uninstalled"
    host_list: []
    redis_hosts: []

- name: display master_ip
  run_once: true
  when: master_ip is defined
  debug:
    msg: "master_ip: {{ master_ip }}"

- name: make a list with redis_hosts
  delegate_to: localhost
  set_fact:
    host_list: "{{ host_list + [inventory_hostname] }}"

- name: convert redis_hosts list to a dict with hostname and ip address
  delegate_to: localhost
  set_fact:
    # yamllint disable-line rule:line-length
    redis_hosts: "{{ redis_hosts | combine({item: ansible_default_ipv4.address}) }}"
  with_items: "{{ host_list }}"

- name: display hostname and ip address of each cluster host
  delegate_to: localhost
  debug:
    msg: "{{ redis_hosts }}"

- name: get service facts
  service_facts:

- name: set redis_state
  when: ansible_facts.services['rh-redis5-redis.service'] is defined
  set_fact:
    # yamllint disable-line rule:line-length
    redis_state: "{{  ansible_facts.services['rh-redis5-redis.service']['state'] }}"

- name: display redis_state
  debug:
    msg: "redis state is: {{ redis_state }}"

- name: verify if another redis is running as master
  when: redis_state == 'running'
  shell: |
    set -o pipefail; \
    {{ redis_path }}/redis-cli info replication|grep master_host|cut -d: -f 2
  changed_when: false
  register: replication_info

- name: fail on split brain condition
  when:
    - replication_info.stdout_lines is defined
    - replication_info.stdout_lines|length > 1
  fail:
    msg: "SPLIT BRAIN IN THE CLUSTER!"

- name: set leader_ip
  when:
    - replication_info.stdout_lines is defined
    - replication_info.stdout_lines|length == 1
  set_fact:
    leader_ip: "{{ replication_info.stdout }}"

- name: display leader_ip
  when: leader_ip is defined
  debug:
    msg: "leader_ip: {{ leader_ip }}"

- name: display leader hostname
  set_fact:
    master_hostname: "{{ inventory_hostname }}"
  when:
    - leader_ip is defined
    - redis_hosts[inventory_hostname] == leader_ip

- name: set master_ip to current leader
  when:
    - leader_ip is defined
    - leader_ip != master_ip
  set_fact:
    master_ip: "{{ leader_ip }}"
  notify: follow the leader

- name: set slaveof
  set_fact:
    redis_slaveof: "{{ master_ip }} {{ redis_port }}"
  notify: follow the leader

- name: display redis_slaveof
  when: redis_slaveof is defined
  debug:
    msg: "redis_slaveof: {{ redis_slaveof }}"

- name: add master_hostname as redis_leader
  add_host:
    name: "{{ master_hostname }}"
    groups: redis_leader
